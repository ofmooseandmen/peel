ext.eclipsePrefs = { p ->
    /* formatter. */
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_ellipsis", "insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_declarations", "insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_comma_in_allocation_expression", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_at_in_annotation_type_declaration", "insert")
    p.put("org.eclipse.jdt.core.formatter.parentheses_positions_in_for_statment", "common_lines")
    p.put("org.eclipse.jdt.core.formatter.comment.new_lines_at_block_boundaries", "true")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_logical_operator", "insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_parameters", "insert")
    p.put("org.eclipse.jdt.core.formatter.comment.insert_new_line_for_parameter", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_package", "insert")
    p.put("org.eclipse.jdt.core.formatter.parentheses_positions_in_method_invocation", "common_lines")
    p.put("org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_enum_constant", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.blank_lines_after_imports", "1")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_while", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.comment.insert_new_line_before_root_tags", "insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_annotation_type_member_declaration", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_throws", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.parentheses_positions_in_switch_statement", "common_lines")
    p.put("org.eclipse.jdt.core.formatter.comment.format_javadoc_comments", "true")
    p.put("org.eclipse.jdt.core.formatter.indentation.size", "4")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_postfix_operator", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.parentheses_positions_in_enum_constant_declaration", "common_lines")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_comma_in_for_increments", "insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_arguments", "insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_comma_in_for_inits", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_semicolon_in_for", "insert")
    p.put("org.eclipse.jdt.core.formatter.align_with_spaces", "false")
    p.put("org.eclipse.jdt.core.formatter.disabling_tag", "@formatter:off")
    p.put("org.eclipse.jdt.core.formatter.continuation_indentation", "2")
    p.put("org.eclipse.jdt.core.formatter.alignment_for_enum_constants", "49")
    p.put("org.eclipse.jdt.core.formatter.blank_lines_before_imports", "1")
    p.put("org.eclipse.jdt.core.formatter.blank_lines_after_package", "1")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_local_declarations", "insert")
    p.put("org.eclipse.jdt.core.formatter.parentheses_positions_in_if_while_statement", "common_lines")
    p.put("org.eclipse.jdt.core.formatter.alignment_for_arguments_in_enum_constant", "48")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_parameterized_type_reference", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.comment.indent_root_tags", "true")
    p.put("org.eclipse.jdt.core.formatter.wrap_before_or_operator_multicatch", "true")
    p.put("org.eclipse.jdt.core.formatter.enabling_tag", "@formatter:on")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_closing_brace_in_block", "insert")
    p.put("org.eclipse.jdt.core.formatter.comment.count_line_length_from_starting_position", "false")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_return", "insert")
    p.put("org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_method_declaration", "16")
    p.put("org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_parameter", "insert")
    p.put("org.eclipse.jdt.core.formatter.wrap_before_multiplicative_operator", "true")
    p.put("org.eclipse.jdt.core.formatter.keep_then_statement_on_same_line", "false")
    p.put("org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_field", "insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_comma_in_explicitconstructorcall_arguments", "insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_prefix_operator", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.blank_lines_between_type_declarations", "1")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_closing_brace_in_array_initializer", "insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_for", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_catch", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_arguments", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_method", "insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_switch", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.alignment_for_parameterized_type_references", "0")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_anonymous_type_declaration", "insert")
    p.put("org.eclipse.jdt.core.formatter.alignment_for_logical_operator", "52")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_parenthesized_expression", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.keep_annotation_declaration_on_one_line", "one_line_never")
    p.put("org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_enum_constant", "insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_multiplicative_operator", "insert")
    p.put("org.eclipse.jdt.core.formatter.never_indent_line_comments_on_first_column", "false")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_and_in_type_parameter", "insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_comma_in_for_inits", "insert")
    p.put("org.eclipse.jdt.core.formatter.indent_statements_compare_to_block", "true")
    p.put("org.eclipse.jdt.core.formatter.brace_position_for_anonymous_type_declaration", "end_of_line")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_question_in_wildcard", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_annotation", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_invocation_arguments", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_switch", "insert")
    p.put("org.eclipse.jdt.core.formatter.comment.align_tags_descriptions_grouped", "false")
    p.put("org.eclipse.jdt.core.formatter.comment.line_length", "115")
    p.put("org.eclipse.jdt.core.formatter.use_on_off_tags", "true")
    p.put("org.eclipse.jdt.core.formatter.keep_method_body_on_one_line", "one_line_never")
    p.put("org.eclipse.jdt.core.formatter.insert_space_between_empty_brackets_in_array_allocation_expression", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.keep_loop_body_block_on_one_line", "one_line_never")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_enum_constant", "insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_invocation", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_assignment_operator", "insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_type_declaration", "insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_for", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.comment.preserve_white_space_between_code_and_line_comments", "false")
    p.put("org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_local_variable", "insert")
    p.put("org.eclipse.jdt.core.formatter.brace_position_for_method_declaration", "end_of_line")
    p.put("org.eclipse.jdt.core.formatter.keep_enum_constant_declaration_on_one_line", "one_line_never")
    p.put("org.eclipse.jdt.core.formatter.align_variable_declarations_on_columns", "false")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_invocation", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.alignment_for_union_type_in_multicatch", "16")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_colon_in_for", "insert")
    p.put("org.eclipse.jdt.core.formatter.keep_type_declaration_on_one_line", "one_line_never")
    p.put("org.eclipse.jdt.core.formatter.number_of_blank_lines_at_beginning_of_method_body", "0")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_arguments", "insert")
    p.put("org.eclipse.jdt.core.formatter.keep_else_statement_on_same_line", "false")
    p.put("org.eclipse.jdt.core.formatter.parentheses_positions_in_catch_clause", "common_lines")
    p.put("org.eclipse.jdt.core.formatter.alignment_for_additive_operator", "52")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_comma_in_parameterized_type_reference", "insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_comma_in_array_initializer", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_field_declarations", "insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_comma_in_annotation", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.alignment_for_arguments_in_explicit_constructor_call", "18")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_relational_operator", "insert")
    p.put("org.eclipse.jdt.core.formatter.alignment_for_multiplicative_operator", "52")
    p.put("org.eclipse.jdt.core.formatter.keep_anonymous_type_declaration_on_one_line", "one_line_never")
    p.put("org.eclipse.jdt.core.formatter.wrap_before_shift_operator", "true")
    p.put("org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_annotation_declaration_header", "true")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_comma_in_superinterfaces", "insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_colon_in_default", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_question_in_conditional", "insert")
    p.put("org.eclipse.jdt.core.formatter.brace_position_for_block", "end_of_line")
    p.put("org.eclipse.jdt.core.formatter.brace_position_for_constructor_declaration", "end_of_line")
    p.put("org.eclipse.jdt.core.formatter.brace_position_for_lambda_body", "end_of_line")
    p.put("org.eclipse.jdt.core.formatter.compact_else_if", "true")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_comma_in_type_parameters", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_catch", "insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_invocation", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_bitwise_operator", "insert")
    p.put("org.eclipse.jdt.core.formatter.put_empty_statement_on_new_line", "true")
    p.put("org.eclipse.jdt.core.formatter.alignment_for_parameters_in_constructor_declaration", "16")
    p.put("org.eclipse.jdt.core.formatter.alignment_for_type_parameters", "0")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_invocation_arguments", "insert")
    p.put("org.eclipse.jdt.core.formatter.alignment_for_arguments_in_method_invocation", "16")
    p.put("org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_constructor_declaration", "16")
    p.put("org.eclipse.jdt.core.formatter.alignment_for_compact_loops", "16")
    p.put("org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_block_comment", "false")
    p.put("org.eclipse.jdt.core.formatter.insert_new_line_before_catch_in_try_statement", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_try", "insert")
    p.put("org.eclipse.jdt.core.formatter.keep_simple_for_body_on_same_line", "false")
    p.put("org.eclipse.jdt.core.formatter.insert_new_line_at_end_of_file_if_missing", "insert")
    p.put("org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_javadoc_comment", "false")
    p.put("org.eclipse.jdt.core.formatter.alignment_for_relational_operator", "0")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_comma_in_array_initializer", "insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_unary_operator", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.alignment_for_expressions_in_array_initializer", "18")
    p.put("org.eclipse.jdt.core.formatter.format_line_comment_starting_on_first_column", "true")
    p.put("org.eclipse.jdt.core.formatter.number_of_empty_lines_to_preserve", "1")
    p.put("org.eclipse.jdt.core.formatter.parentheses_positions_in_annotation", "common_lines")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_colon_in_case", "insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_ellipsis", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_additive_operator", "insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_semicolon_in_try_resources", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_colon_in_assert", "insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_if", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_comma_in_type_arguments", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_and_in_type_parameter", "insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_string_concatenation", "insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_parenthesized_expression", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.comment.format_line_comments", "true")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_colon_in_labeled_statement", "insert")
    p.put("org.eclipse.jdt.core.formatter.align_type_members_on_columns", "false")
    p.put("org.eclipse.jdt.core.formatter.alignment_for_assignment", "16")
    p.put("org.eclipse.jdt.core.formatter.alignment_for_module_statements", "16")
    p.put("org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_type_header", "true")
    p.put("org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_declaration", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.comment.align_tags_names_descriptions", "false")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_enum_constant", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.alignment_for_superinterfaces_in_type_declaration", "16")
    p.put("org.eclipse.jdt.core.formatter.keep_if_then_body_block_on_one_line", "one_line_never")
    p.put("org.eclipse.jdt.core.formatter.blank_lines_before_first_class_body_declaration", "1")
    p.put("org.eclipse.jdt.core.formatter.alignment_for_conditional_expression", "80")
    p.put("org.eclipse.jdt.core.formatter.insert_new_line_before_closing_brace_in_array_initializer", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_parameters", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.format_guardian_clause_on_one_line", "false")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_if", "insert")
    p.put("org.eclipse.jdt.core.formatter.align_assignment_statements_on_columns", "false")
    p.put("org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_type", "insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_block", "insert")
    p.put("org.eclipse.jdt.core.formatter.brace_position_for_enum_declaration", "end_of_line")
    p.put("org.eclipse.jdt.core.formatter.brace_position_for_block_in_case", "end_of_line")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_constructor_declaration", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.alignment_for_conditional_expression_chain", "0")
    p.put("org.eclipse.jdt.core.formatter.comment.format_header", "false")
    p.put("org.eclipse.jdt.core.formatter.alignment_for_arguments_in_allocation_expression", "18")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_additive_operator", "insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_method_invocation", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_while", "insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_switch", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.alignment_for_method_declaration", "0")
    p.put("org.eclipse.jdt.core.formatter.join_wrapped_lines", "true")
    p.put("org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_constructor_declaration", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.wrap_before_conditional_operator", "true")
    p.put("org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_cases", "true")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_closing_bracket_in_array_allocation_expression", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_synchronized", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.alignment_for_shift_operator", "0")
    p.put("org.eclipse.jdt.core.formatter.align_fields_grouping_blank_lines", "2147483647")
    p.put("org.eclipse.jdt.core.formatter.comment.new_lines_at_javadoc_boundaries", "true")
    p.put("org.eclipse.jdt.core.formatter.alignment_for_bitwise_operator", "52")
    p.put("org.eclipse.jdt.core.formatter.brace_position_for_annotation_type_declaration", "end_of_line")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_colon_in_for", "insert")
    p.put("org.eclipse.jdt.core.formatter.alignment_for_resources_in_try", "80")
    p.put("org.eclipse.jdt.core.formatter.use_tabs_only_for_leading_indentations", "false")
    p.put("org.eclipse.jdt.core.formatter.parentheses_positions_in_try_clause", "common_lines")
    p.put("org.eclipse.jdt.core.formatter.alignment_for_selector_in_method_invocation", "52")
    p.put("org.eclipse.jdt.core.formatter.never_indent_block_comments_on_first_column", "false")
    p.put("org.eclipse.jdt.core.formatter.keep_code_block_on_one_line", "one_line_never")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_synchronized", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_throws", "insert")
    p.put("org.eclipse.jdt.core.formatter.tabulation.size", "4")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_bitwise_operator", "insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_comma_in_allocation_expression", "insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_opening_bracket_in_array_reference", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_colon_in_conditional", "insert")
    p.put("org.eclipse.jdt.core.formatter.comment.format_source_code", "true")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_array_initializer", "insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_try", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_semicolon_in_try_resources", "insert")
    p.put("org.eclipse.jdt.core.formatter.blank_lines_before_field", "1")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_at_in_annotation", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.continuation_indentation_for_array_initializer", "2")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_question_in_wildcard", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.blank_lines_before_method", "1")
    p.put("org.eclipse.jdt.core.formatter.alignment_for_superclass_in_type_declaration", "16")
    p.put("org.eclipse.jdt.core.formatter.alignment_for_superinterfaces_in_enum_declaration", "16")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_throw", "insert")
    p.put("org.eclipse.jdt.core.formatter.wrap_before_assignment_operator", "false")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_colon_in_labeled_statement", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.brace_position_for_switch", "end_of_line")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_comma_in_superinterfaces", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_declaration_parameters", "insert")
    p.put("org.eclipse.jdt.core.formatter.insert_new_line_after_type_annotation", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_opening_brace_in_array_initializer", "insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_parenthesized_expression", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.comment.format_html", "true")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_at_in_annotation_type_declaration", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_parameters", "insert")
    p.put("org.eclipse.jdt.core.formatter.parentheses_positions_in_method_delcaration", "common_lines")
    p.put("org.eclipse.jdt.core.formatter.alignment_for_compact_if", "16")
    p.put("org.eclipse.jdt.core.formatter.keep_lambda_body_block_on_one_line", "one_line_never")
    p.put("org.eclipse.jdt.core.formatter.indent_empty_lines", "false")
    p.put("org.eclipse.jdt.core.formatter.alignment_for_type_arguments", "0")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_comma_in_parameterized_type_reference", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_unary_operator", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_enum_constant", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.alignment_for_arguments_in_annotation", "0")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_declarations", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.keep_empty_array_initializer_on_one_line", "false")
    p.put("org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_switch", "true")
    p.put("org.eclipse.jdt.core.formatter.insert_new_line_before_else_in_if_statement", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_assignment_operator", "insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_constructor_declaration", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.blank_lines_before_new_chunk", "1")
    p.put("org.eclipse.jdt.core.formatter.insert_new_line_after_label", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_enum_declaration_header", "true")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_opening_bracket_in_array_allocation_expression", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_constructor_declaration", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_colon_in_conditional", "insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_parameterized_type_reference", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_parameters", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_type_arguments", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_cast", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_colon_in_assert", "insert")
    p.put("org.eclipse.jdt.core.formatter.blank_lines_before_member_type", "1")
    p.put("org.eclipse.jdt.core.formatter.insert_new_line_before_while_in_do_statement", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_logical_operator", "insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_type_reference", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_parameterized_type_reference", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.alignment_for_arguments_in_qualified_allocation_expression", "20")
    p.put("org.eclipse.jdt.core.formatter.insert_new_line_after_opening_brace_in_array_initializer", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.indent_breaks_compare_to_cases", "true")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_declaration", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.wrap_before_bitwise_operator", "true")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_if", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_semicolon", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.wrap_before_relational_operator", "true")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_postfix_operator", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_try", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_type_arguments", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_cast", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.comment.format_block_comments", "true")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_lambda_arrow", "insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_method_declaration", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.comment.indent_tag_description", "false")
    p.put("org.eclipse.jdt.core.formatter.keep_imple_if_on_one_line", "false")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_enum_declaration", "insert")
    p.put("org.eclipse.jdt.core.formatter.alignment_for_parameters_in_method_declaration", "16")
    p.put("org.eclipse.jdt.core.formatter.insert_space_between_brackets_in_array_type_reference", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_type_parameters", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.alignment_for_string_concatenation", "52")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_semicolon_in_for", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_declaration_throws", "insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_allocation_expression", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.indent_statements_compare_to_body", "true")
    p.put("org.eclipse.jdt.core.formatter.alignment_for_multiple_fields", "16")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_constant_arguments", "insert")
    p.put("org.eclipse.jdt.core.formatter.keep_simple_while_body_on_same_line", "false")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_prefix_operator", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.brace_position_for_array_initializer", "end_of_line")
    p.put("org.eclipse.jdt.core.formatter.wrap_before_logical_operator", "true")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_shift_operator", "insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_method_declaration", "insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_parameters", "insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_catch", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_closing_bracket_in_array_reference", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_comma_in_annotation", "insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_constant_arguments", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.parentheses_positions_in_lambda_declaration", "common_lines")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_shift_operator", "insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_between_empty_braces_in_array_initializer", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_colon_in_case", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_comma_in_multiple_local_declarations", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.keep_simple_do_while_body_on_same_line", "false")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_annotation_type_declaration", "insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_reference", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.keep_enum_declaration_on_one_line", "one_line_never")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_declaration", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.wrap_outer_expressions_when_nested", "true")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_closing_paren_in_cast", "insert")
    p.put("org.eclipse.jdt.core.formatter.brace_position_for_enum_constant", "end_of_line")
    p.put("org.eclipse.jdt.core.formatter.brace_position_for_type_declaration", "end_of_line")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_multiplicative_operator", "insert")
    p.put("org.eclipse.jdt.core.formatter.blank_lines_before_package", "0")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_for", "insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_synchronized", "insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_comma_in_for_increments", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_annotation_type_member_declaration", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.alignment_for_expressions_in_for_loop_header", "0")
    p.put("org.eclipse.jdt.core.formatter.wrap_before_additive_operator", "true")
    p.put("org.eclipse.jdt.core.formatter.keep_simple_getter_setter_on_one_line", "false")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_while", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_enum_constant", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_comma_in_explicitconstructorcall_arguments", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_annotation", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_parameters", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_enum_constant_header", "true")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_string_concatenation", "insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_lambda_arrow", "insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_constructor_declaration", "insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_throws", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.join_lines_in_comments", "true")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_type_parameters", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_question_in_conditional", "insert")
    p.put("org.eclipse.jdt.core.formatter.comment.indent_parameter_description", "true")
    p.put("org.eclipse.jdt.core.formatter.insert_new_line_before_finally_in_try_statement", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.tabulation.char", "space")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_relational_operator", "insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_comma_in_multiple_field_declarations", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.wrap_before_string_concatenation", "true")
    p.put("org.eclipse.jdt.core.formatter.blank_lines_between_import_groups", "1")
    p.put("org.eclipse.jdt.core.formatter.lineSplit", "115")
    p.put("org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_annotation", "do not insert")
    p.put("org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_switch", "insert")
    
    /* compiler. */
    p.put("org.eclipse.jdt.core.compiler.problem.typeParameterHiding", "error")
    p.put("org.eclipse.jdt.core.compiler.problem.annotationSuperInterface", "error")
    p.put("org.eclipse.jdt.core.compiler.problem.assertIdentifier", "error")
    p.put("org.eclipse.jdt.core.compiler.problem.autoboxing", "ignore")
    p.put("org.eclipse.jdt.core.compiler.problem.comparingIdentical", "error")
    p.put("org.eclipse.jdt.core.compiler.problem.deadCode", "error")
    p.put("org.eclipse.jdt.core.compiler.problem.deprecation", "warning")
    p.put("org.eclipse.jdt.core.compiler.problem.deprecationInDeprecatedCode", "enabled")
    p.put("org.eclipse.jdt.core.compiler.problem.deprecationWhenOverridingDeprecatedMethod", "enabled")
    p.put("org.eclipse.jdt.core.compiler.problem.discouragedReference", "error")
    p.put("org.eclipse.jdt.core.compiler.problem.emptyStatement", "error")
    p.put("org.eclipse.jdt.core.compiler.problem.enumIdentifier", "error")
    p.put("org.eclipse.jdt.core.compiler.problem.explicitlyClosedAutoCloseable", "error")
    p.put("org.eclipse.jdt.core.compiler.problem.fallthroughCase", "error")
    p.put("org.eclipse.jdt.core.compiler.problem.fatalOptionalError", "disabled")
    p.put("org.eclipse.jdt.core.compiler.problem.fieldHiding", "error")
    p.put("org.eclipse.jdt.core.compiler.problem.finalParameterBound", "error")
    p.put("org.eclipse.jdt.core.compiler.problem.finallyBlockNotCompletingNormally", "error")
    p.put("org.eclipse.jdt.core.compiler.problem.forbiddenReference", "error")
    p.put("org.eclipse.jdt.core.compiler.problem.hiddenCatchBlock", "error")
    p.put("org.eclipse.jdt.core.compiler.problem.includeNullInfoFromAsserts", "enabled")
    p.put("org.eclipse.jdt.core.compiler.problem.incompatibleNonInheritedInterfaceMethod", "error")
    p.put("org.eclipse.jdt.core.compiler.problem.incompleteEnumSwitch", "error")
    p.put("org.eclipse.jdt.core.compiler.problem.indirectStaticAccess", "error")
    p.put("org.eclipse.jdt.core.compiler.problem.invalidJavadoc", "error")
    p.put("org.eclipse.jdt.core.compiler.problem.invalidJavadocTags", "enabled")
    p.put("org.eclipse.jdt.core.compiler.problem.invalidJavadocTagsDeprecatedRef", "disabled")
    p.put("org.eclipse.jdt.core.compiler.problem.invalidJavadocTagsNotVisibleRef", "enabled")
    p.put("org.eclipse.jdt.core.compiler.problem.invalidJavadocTagsVisibility", "private")
    p.put("org.eclipse.jdt.core.compiler.problem.localVariableHiding", "error")
    p.put("org.eclipse.jdt.core.compiler.problem.methodWithConstructorName", "error")
    p.put("org.eclipse.jdt.core.compiler.problem.missingDefaultCase", "error")
    p.put("org.eclipse.jdt.core.compiler.problem.missingDeprecatedAnnotation", "error")
    p.put("org.eclipse.jdt.core.compiler.problem.missingEnumCaseDespiteDefault", "disabled")
    p.put("org.eclipse.jdt.core.compiler.problem.missingHashCodeMethod", "error")
    p.put("org.eclipse.jdt.core.compiler.problem.missingJavadocComments", "warning")
    p.put("org.eclipse.jdt.core.compiler.problem.missingJavadocCommentsOverriding", "disabled")
    p.put("org.eclipse.jdt.core.compiler.problem.missingJavadocCommentsVisibility", "private")
    p.put("org.eclipse.jdt.core.compiler.problem.missingJavadocTagDescription", "all_standard_tags")
    p.put("org.eclipse.jdt.core.compiler.problem.missingJavadocTags", "warning")
    p.put("org.eclipse.jdt.core.compiler.problem.missingJavadocTagsMethodTypeParameters", "enabled")
    p.put("org.eclipse.jdt.core.compiler.problem.missingJavadocTagsOverriding", "disabled")
    p.put("org.eclipse.jdt.core.compiler.problem.missingJavadocTagsVisibility", "private")
    p.put("org.eclipse.jdt.core.compiler.problem.missingOverrideAnnotation", "error")
    p.put("org.eclipse.jdt.core.compiler.problem.missingOverrideAnnotationForInterfaceMethodImplementation", "enabled")
    p.put("org.eclipse.jdt.core.compiler.problem.missingSerialVersion", "error")
    p.put("org.eclipse.jdt.core.compiler.problem.missingSynchronizedOnInheritedMethod", "error")
    p.put("org.eclipse.jdt.core.compiler.problem.noEffectAssignment", "error")
    p.put("org.eclipse.jdt.core.compiler.problem.noImplicitStringConversion", "error")
    p.put("org.eclipse.jdt.core.compiler.problem.nonExternalizedStringLiteral", "ignore")
    p.put("org.eclipse.jdt.core.compiler.problem.nonnullParameterAnnotationDropped", "warning")
    p.put("org.eclipse.jdt.core.compiler.problem.nonnullTypeVariableFromLegacyInvocation", "warning")
    p.put("org.eclipse.jdt.core.compiler.problem.nullAnnotationInferenceConflict", "error")
    p.put("org.eclipse.jdt.core.compiler.problem.nullReference", "error")
    p.put("org.eclipse.jdt.core.compiler.problem.nullSpecViolation", "error")
    p.put("org.eclipse.jdt.core.compiler.problem.nullUncheckedConversion", "warning")
    p.put("org.eclipse.jdt.core.compiler.problem.overridingPackageDefaultMethod", "error")
    p.put("org.eclipse.jdt.core.compiler.problem.parameterAssignment", "error")
    p.put("org.eclipse.jdt.core.compiler.problem.pessimisticNullAnalysisForFreeTypeVariables", "warning")
    p.put("org.eclipse.jdt.core.compiler.problem.possibleAccidentalBooleanAssignment", "error")
    p.put("org.eclipse.jdt.core.compiler.problem.potentialNullReference", "warning")
    p.put("org.eclipse.jdt.core.compiler.problem.potentiallyUnclosedCloseable", "warning")
    p.put("org.eclipse.jdt.core.compiler.problem.rawTypeReference", "error")
    p.put("org.eclipse.jdt.core.compiler.problem.redundantNullAnnotation", "warning")
    p.put("org.eclipse.jdt.core.compiler.problem.redundantNullCheck", "error")
    p.put("org.eclipse.jdt.core.compiler.problem.redundantSpecificationOfTypeArguments", "error")
    p.put("org.eclipse.jdt.core.compiler.problem.redundantSuperinterface", "error")
    p.put("org.eclipse.jdt.core.compiler.problem.reportMethodCanBePotentiallyStatic", "ignore")
    p.put("org.eclipse.jdt.core.compiler.problem.reportMethodCanBeStatic", "ignore")
    p.put("org.eclipse.jdt.core.compiler.problem.specialParameterHidingField", "enabled")
    p.put("org.eclipse.jdt.core.compiler.problem.staticAccessReceiver", "error")
    p.put("org.eclipse.jdt.core.compiler.problem.suppressOptionalErrors", "enabled")
    p.put("org.eclipse.jdt.core.compiler.problem.suppressWarnings", "enabled")
    p.put("org.eclipse.jdt.core.compiler.problem.syntacticNullAnalysisForFields", "disabled")
    p.put("org.eclipse.jdt.core.compiler.problem.syntheticAccessEmulation", "warning")
    p.put("org.eclipse.jdt.core.compiler.problem.typeParameterHiding", "error")
    p.put("org.eclipse.jdt.core.compiler.problem.unavoidableGenericTypeProblems", "enabled")
    p.put("org.eclipse.jdt.core.compiler.problem.uncheckedTypeOperation", "error")
    p.put("org.eclipse.jdt.core.compiler.problem.unclosedCloseable", "error")
    p.put("org.eclipse.jdt.core.compiler.problem.undocumentedEmptyBlock", "error")
    p.put("org.eclipse.jdt.core.compiler.problem.unhandledWarningToken", "error")
    p.put("org.eclipse.jdt.core.compiler.problem.unnecessaryElse", "error")
    p.put("org.eclipse.jdt.core.compiler.problem.unnecessaryTypeCheck", "error")
    p.put("org.eclipse.jdt.core.compiler.problem.unqualifiedFieldAccess", "ignore")
    p.put("org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownException", "error")
    p.put("org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionExemptExceptionAndThrowable", "disabled")
    p.put("org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionIncludeDocCommentReference", "disabled")
    p.put("org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionWhenOverriding", "disabled")
    p.put("org.eclipse.jdt.core.compiler.problem.unusedExceptionParameter", "warning")
    p.put("org.eclipse.jdt.core.compiler.problem.unusedImport", "error")
    p.put("org.eclipse.jdt.core.compiler.problem.unusedLabel", "error")
    p.put("org.eclipse.jdt.core.compiler.problem.unusedLocal", "error")
    p.put("org.eclipse.jdt.core.compiler.problem.unusedObjectAllocation", "error")
    p.put("org.eclipse.jdt.core.compiler.problem.unusedParameter", "error")
    p.put("org.eclipse.jdt.core.compiler.problem.unusedParameterIncludeDocCommentReference", "disabled")
    p.put("org.eclipse.jdt.core.compiler.problem.unusedParameterWhenImplementingAbstract", "disabled")
    p.put("org.eclipse.jdt.core.compiler.problem.unusedParameterWhenOverridingConcrete", "disabled")
    p.put("org.eclipse.jdt.core.compiler.problem.unusedPrivateMember", "error")
    p.put("org.eclipse.jdt.core.compiler.problem.unusedTypeParameter", "error")
    p.put("org.eclipse.jdt.core.compiler.problem.unusedWarningToken", "error")
    p.put("org.eclipse.jdt.core.compiler.problem.varargsArgumentNeedCast", "error")
}